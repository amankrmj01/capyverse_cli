<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/amankrmj/capyverse/java/InstallJavaVersionCommand.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/amankrmj/capyverse/java/InstallJavaVersionCommand.java" />
              <option name="originalContent" value="package com.amankrmj.capyverse.java;&#10;&#10;import picocli.CommandLine.Command;&#10;import picocli.CommandLine.Option;&#10;import picocli.CommandLine.Parameters;&#10;&#10;import java.util.concurrent.Callable;&#10;&#10;@Command(name = &quot;install&quot;,&#10;        description = &quot;Install a specific Java version.&quot;)&#10;public class InstallJavaVersionCommand implements Callable&lt;Integer&gt; {&#10;    @Option(names = {&quot;-d&quot;, &quot;--download&quot;}, description = &quot;Download and install Oracle JDK exe for the specified version&quot;)&#10;    private boolean download = false;&#10;&#10;    @Parameters(index = &quot;0&quot;, description = &quot;Java version to install (e.g., 17, 21, 11-graalvm)&quot;, arity = &quot;0..1&quot;)&#10;    private String version;&#10;&#10;    @Override&#10;    public Integer call() throws Exception {&#10;        if (download) {&#10;            return installVersion(version);&#10;        }&#10;        System.err.println(&quot;Please use -d to download and install a Java version.&quot;);&#10;        return 1;&#10;    }&#10;&#10;    private Integer installVersion(String version) {&#10;        System.out.println(&quot;Installing Java &quot; + version + &quot;...&quot;);&#10;        String userProfile = System.getenv(&quot;USERPROFILE&quot;);&#10;        String zipUrl = &quot;https://download.oracle.com/java/24/archive/jdk-24.0.1_windows-x64_bin.zip&quot;;&#10;        String targetDir = userProfile + &quot;\\AppData\\Local\\capyverse\\cache\\java\\downloads&quot;;&#10;        String targetFile = targetDir + &quot;\\jdk-24.0.1_windows-x64_bin.zip&quot;;&#10;        String installDir = userProfile + &quot;\\AppData\\Local\\capyverse\\lang\\java&quot;;&#10;        new java.io.File(targetDir).mkdirs();&#10;        new java.io.File(installDir).mkdirs();&#10;        try {&#10;//            downloadFile(zipUrl, targetFile);&#10;            System.out.println(&quot;Downloaded to: &quot; + targetFile);&#10;            // Extract zip to installDir&#10;            java.nio.file.Path zipPath = java.nio.file.Paths.get(targetFile);&#10;            java.nio.file.Path extractTo = java.nio.file.Paths.get(installDir);&#10;            try (java.util.zip.ZipInputStream zis = new java.util.zip.ZipInputStream(new java.io.FileInputStream(zipPath.toFile()))) {&#10;                java.util.zip.ZipEntry entry;&#10;                while ((entry = zis.getNextEntry()) != null) {&#10;                    java.io.File outFile = new java.io.File(extractTo.toFile(), entry.getName());&#10;                    if (entry.isDirectory()) {&#10;                        outFile.mkdirs();&#10;                    } else {&#10;                        outFile.getParentFile().mkdirs();&#10;                        try (java.io.FileOutputStream fos = new java.io.FileOutputStream(outFile)) {&#10;                            byte[] buffer = new byte[8192];&#10;                            int len;&#10;                            while ((len = zis.read(buffer)) &gt; 0) {&#10;                                fos.write(buffer, 0, len);&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;            System.out.println(&quot;Extracted to: &quot; + installDir);&#10;            // Set user PATH to JDK bin using PowerShell&#10;            String binPath = installDir + &quot;\\jdk-24.0.1&quot; + &quot;\\bin&quot;;&#10;            String psCmd = &quot;powershell -Command \&quot;&quot;&#10;                    + &quot;$oldPath = [Environment]::GetEnvironmentVariable('PATH', 'User');&quot;&#10;                    + &quot;if ($oldPath -notlike '*&quot; + binPath + &quot;*') {&quot;&#10;                    + &quot;  [Environment]::SetEnvironmentVariable('PATH', $oldPath + ';&quot; + binPath + &quot;', 'User')&quot;&#10;                    + &quot;}\&quot;&quot;;&#10;            Process setxProc = new ProcessBuilder(&quot;cmd&quot;, &quot;/c&quot;, psCmd).inheritIO().start();&#10;            int setxExit = setxProc.waitFor();&#10;            if (setxExit == 0) {&#10;                System.out.println(&quot;User PATH updated to include: &quot; + binPath);&#10;            } else {&#10;                System.err.println(&quot;Failed to update PATH environment variable.&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Download or extraction failed: &quot; + e.getMessage());&#10;            return 1;&#10;        }&#10;        return 0;&#10;    }&#10;&#10;    private void downloadFile(String urlStr, String filePath) throws Exception {&#10;        java.net.URL url = new java.net.URL(urlStr);&#10;        java.net.URLConnection connection = url.openConnection();&#10;        int fileSize = connection.getContentLength();&#10;        System.out.println(&quot;Downloading&quot;);&#10;        try (java.io.InputStream in = connection.getInputStream();&#10;             java.io.FileOutputStream out = new java.io.FileOutputStream(filePath)) {&#10;            byte[] buffer = new byte[8192];&#10;            int bytesRead;&#10;            int totalRead = 0;&#10;            int lastPercent = -1;&#10;            while ((bytesRead = in.read(buffer)) != -1) {&#10;                out.write(buffer, 0, bytesRead);&#10;                totalRead += bytesRead;&#10;                if (fileSize &gt; 0) {&#10;                    int percent = (int) ((totalRead * 100L) / fileSize);&#10;                    if (percent != lastPercent) {&#10;                        StringBuilder bar = new StringBuilder();&#10;                        int totalBars = 50;&#10;                        int greenBars = percent / 2; // Each '=' represents 10%&#10;                        int redBars = totalBars - greenBars;&#10;                        String GREEN = &quot;\033[32m&quot;;&#10;                        String RED = &quot;\033[31m&quot;;&#10;                        String RESET = &quot;\033[0m&quot;;&#10;                        bar.append(GREEN);&#10;                        for (int i = 0; i &lt; greenBars; i++) bar.append('=');&#10;                        bar.append(RESET);&#10;                        bar.append(RED);&#10;                        for (int i = 0; i &lt; redBars; i++) bar.append('-');&#10;                        bar.append(RESET);&#10;                        System.out.print(&quot;\r&quot; + bar + &quot; : &quot; + percent + &quot;%&quot;);&#10;                        lastPercent = percent;&#10;                    }&#10;                }&#10;            }&#10;            // Print final bar at 100%&#10;            StringBuilder bar = new StringBuilder();&#10;            String GREEN = &quot;\u001B[32m&quot;;&#10;            String RESET = &quot;\u001B[0m&quot;;&#10;            bar.append(GREEN);&#10;            for (int i = 0; i &lt; 100; i++) bar.append('=');&#10;            bar.append(RESET);&#10;            System.out.println(&quot;\r&quot; + bar + &quot; : 100%&quot;);&#10;        }&#10;    }&#10;&#10;    private void showProgressBar(String message, int percent) {&#10;        int totalBars = 10;&#10;        int greenBars = percent / 10;&#10;        int redBars = totalBars - greenBars;&#10;        String GREEN = &quot;\033[32m&quot;;&#10;        String RED = &quot;\033[31m&quot;;&#10;        String RESET = &quot;\033[0m&quot;;&#10;        StringBuilder bar = new StringBuilder();&#10;        bar.append(GREEN);&#10;        for (int i = 0; i &lt; greenBars; i++) bar.append('=');&#10;        bar.append(RESET);&#10;        bar.append(RED);&#10;        for (int i = 0; i &lt; redBars; i++) bar.append('-');&#10;        bar.append(RESET);&#10;        System.out.print(&quot;\r&quot; + message + &quot; &quot; + bar + &quot; : &quot; + percent + &quot;%&quot;);&#10;    }&#10;&#10;    private boolean silentInstallexe(String exePath, String installDir) {&#10;        try {&#10;            System.out.println(&quot;\nInstalling...&quot;);&#10;            // Show a countdown instead of a progress bar&#10;            for (int i = 5; i &gt; 0; i--) {&#10;                System.out.print(&quot;\rInstallation will complete in &quot; + i + &quot; seconds...&quot;);&#10;                Thread.sleep(1000);&#10;            }&#10;            System.out.print(&quot;\rStarting installation...           \n&quot;);&#10;            Process installProc = new ProcessBuilder(&quot;exeexec&quot;, &quot;/i&quot;, exePath, &quot;/qn&quot;, &quot;INSTALLDIR=&quot; + installDir)&#10;                    .inheritIO().start();&#10;            int exitCode = installProc.waitFor();&#10;            if (exitCode == 0) {&#10;                System.out.println(&quot;exe installed successfully to: &quot; + installDir);&#10;                // Set user PATH to JDK bin&#10;                String binPath = installDir + &quot;\\bin&quot;;&#10;                // Append binPath to existing user PATH&#10;                String currentPath = System.getenv(&quot;PATH&quot;);&#10;                String newPath = currentPath;&#10;                if (!currentPath.contains(binPath)) {&#10;                    newPath = binPath + &quot;;&quot; + currentPath;&#10;                }&#10;                Process setxProc = new ProcessBuilder(&quot;setx&quot;, &quot;PATH&quot;, newPath)&#10;                        .inheritIO().start();&#10;                int setxExit = setxProc.waitFor();&#10;                if (setxExit == 0) {&#10;                    System.out.println(&quot;User PATH updated to include: &quot; + binPath);&#10;                } else {&#10;                    System.err.println(&quot;Failed to update PATH environment variable.&quot;);&#10;                }&#10;                return true;&#10;            } else {&#10;                System.err.println(&quot;exe installation failed with exit code: &quot; + exitCode);&#10;                return false;&#10;            }&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Installation failed: &quot; + e.getMessage());&#10;            return false;&#10;        }&#10;    }&#10;}&#10;&#10;//installation at dir given&#10;//Process installProc = new ProcessBuilder(&#10;//        &quot;powershell&quot;,&#10;//        &quot;-Command&quot;,&#10;//        &quot;Start-Process&quot;,&#10;//        '&quot;' + targetFile + '&quot;',&#10;//        &quot;-ArgumentList&quot;,&#10;//        &quot;'/s', 'INSTALLDIR=\&quot;&quot; + installDir + &quot;\&quot;'&quot;,&#10;//        &quot;-Verb&quot;,&#10;//        &quot;RunAs&quot;&#10;//).inheritIO().start();&#10;" />
              <option name="updatedContent" value="package com.amankrmj.capyverse.java;&#10;&#10;import picocli.CommandLine.Command;&#10;import picocli.CommandLine.Option;&#10;import picocli.CommandLine.Parameters;&#10;&#10;import java.util.concurrent.Callable;&#10;&#10;@Command(name = &quot;install&quot;,&#10;        description = &quot;Install a specific Java version.&quot;)&#10;public class InstallJavaVersionCommand implements Callable&lt;Integer&gt; {&#10;    @Option(names = {&quot;-d&quot;, &quot;--download&quot;}, description = &quot;Download and install Oracle JDK exe for the specified version&quot;)&#10;    private boolean download = false;&#10;&#10;    @Parameters(index = &quot;0&quot;, description = &quot;Java version to install (e.g., 17, 21, 11-graalvm)&quot;, arity = &quot;0..1&quot;)&#10;    private String version;&#10;&#10;    @Override&#10;    public Integer call() throws Exception {&#10;        if (download) {&#10;            return installVersion(version);&#10;        }&#10;        System.err.println(&quot;Please use -d to download and install a Java version.&quot;);&#10;        return 1;&#10;    }&#10;&#10;    private Integer installVersion(String version) {&#10;        System.out.println(&quot;Installing Java &quot; + version + &quot;...&quot;);&#10;        String userProfile = System.getenv(&quot;USERPROFILE&quot;);&#10;        String zipUrl = &quot;https://download.oracle.com/java/24/archive/jdk-24.0.1_windows-x64_bin.zip&quot;;&#10;        String targetDir = userProfile + &quot;\\AppData\\Local\\capyverse\\cache\\java\\downloads&quot;;&#10;        String targetFile = targetDir + &quot;\\jdk-24.0.1_windows-x64_bin.zip&quot;;&#10;        String installDir = userProfile + &quot;\\AppData\\Local\\capyverse\\lang\\java&quot;;&#10;        new java.io.File(targetDir).mkdirs();&#10;        new java.io.File(installDir).mkdirs();&#10;        try {&#10;//            downloadFile(zipUrl, targetFile);&#10;            System.out.println(&quot;Downloaded to: &quot; + targetFile);&#10;            // Extract zip to installDir&#10;            java.nio.file.Path zipPath = java.nio.file.Paths.get(targetFile);&#10;            java.nio.file.Path extractTo = java.nio.file.Paths.get(installDir);&#10;            try (java.util.zip.ZipInputStream zis = new java.util.zip.ZipInputStream(new java.io.FileInputStream(zipPath.toFile()))) {&#10;                java.util.zip.ZipEntry entry;&#10;                while ((entry = zis.getNextEntry()) != null) {&#10;                    java.io.File outFile = new java.io.File(extractTo.toFile(), entry.getName());&#10;                    if (entry.isDirectory()) {&#10;                        outFile.mkdirs();&#10;                    } else {&#10;                        outFile.getParentFile().mkdirs();&#10;                        try (java.io.FileOutputStream fos = new java.io.FileOutputStream(outFile)) {&#10;                            byte[] buffer = new byte[8192];&#10;                            int len;&#10;                            while ((len = zis.read(buffer)) &gt; 0) {&#10;                                fos.write(buffer, 0, len);&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;            System.out.println(&quot;Extracted to: &quot; + installDir);&#10;            // Set user PATH to JDK bin using PowerShell&#10;            String binPath = installDir + &quot;\\jdk-24.0.1\\bin&quot;;&#10;            String psCmd = &quot;powershell -Command \&quot;&quot;&#10;                + &quot;$oldPath = [Environment]::GetEnvironmentVariable('PATH', 'User');&quot;&#10;                + &quot;if ($oldPath -notlike '*&quot; + binPath + &quot;*') {&quot;&#10;                + &quot;  if ($oldPath -and $oldPath.Trim().Length -gt 0) {&quot;&#10;                + &quot;    [Environment]::SetEnvironmentVariable('PATH', $oldPath.TrimEnd(';') + ';&quot; + binPath + &quot;', 'User')&quot;&#10;                + &quot;  } else {&quot;&#10;                + &quot;    [Environment]::SetEnvironmentVariable('PATH', '&quot; + binPath + &quot;', 'User')&quot;&#10;                + &quot;  }&quot;&#10;                + &quot; }\&quot;&quot;;&#10;            Process setxProc = new ProcessBuilder(&quot;cmd&quot;, &quot;/c&quot;, psCmd).inheritIO().start();&#10;            int setxExit = setxProc.waitFor();&#10;            if (setxExit == 0) {&#10;                System.out.println(&quot;User PATH updated to include: &quot; + binPath);&#10;            } else {&#10;                System.err.println(&quot;Failed to update PATH environment variable.&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Download or extraction failed: &quot; + e.getMessage());&#10;            return 1;&#10;        }&#10;        return 0;&#10;    }&#10;&#10;    private void downloadFile(String urlStr, String filePath) throws Exception {&#10;        java.net.URL url = new java.net.URL(urlStr);&#10;        java.net.URLConnection connection = url.openConnection();&#10;        int fileSize = connection.getContentLength();&#10;        System.out.println(&quot;Downloading&quot;);&#10;        try (java.io.InputStream in = connection.getInputStream();&#10;             java.io.FileOutputStream out = new java.io.FileOutputStream(filePath)) {&#10;            byte[] buffer = new byte[8192];&#10;            int bytesRead;&#10;            int totalRead = 0;&#10;            int lastPercent = -1;&#10;            while ((bytesRead = in.read(buffer)) != -1) {&#10;                out.write(buffer, 0, bytesRead);&#10;                totalRead += bytesRead;&#10;                if (fileSize &gt; 0) {&#10;                    int percent = (int) ((totalRead * 100L) / fileSize);&#10;                    if (percent != lastPercent) {&#10;                        StringBuilder bar = new StringBuilder();&#10;                        int totalBars = 50;&#10;                        int greenBars = percent / 2; // Each '=' represents 10%&#10;                        int redBars = totalBars - greenBars;&#10;                        String GREEN = &quot;\033[32m&quot;;&#10;                        String RED = &quot;\033[31m&quot;;&#10;                        String RESET = &quot;\033[0m&quot;;&#10;                        bar.append(GREEN);&#10;                        for (int i = 0; i &lt; greenBars; i++) bar.append('=');&#10;                        bar.append(RESET);&#10;                        bar.append(RED);&#10;                        for (int i = 0; i &lt; redBars; i++) bar.append('-');&#10;                        bar.append(RESET);&#10;                        System.out.print(&quot;\r&quot; + bar + &quot; : &quot; + percent + &quot;%&quot;);&#10;                        lastPercent = percent;&#10;                    }&#10;                }&#10;            }&#10;            // Print final bar at 100%&#10;            StringBuilder bar = new StringBuilder();&#10;            String GREEN = &quot;\u001B[32m&quot;;&#10;            String RESET = &quot;\u001B[0m&quot;;&#10;            bar.append(GREEN);&#10;            for (int i = 0; i &lt; 100; i++) bar.append('=');&#10;            bar.append(RESET);&#10;            System.out.println(&quot;\r&quot; + bar + &quot; : 100%&quot;);&#10;        }&#10;    }&#10;&#10;    private void showProgressBar(String message, int percent) {&#10;        int totalBars = 10;&#10;        int greenBars = percent / 10;&#10;        int redBars = totalBars - greenBars;&#10;        String GREEN = &quot;\033[32m&quot;;&#10;        String RED = &quot;\033[31m&quot;;&#10;        String RESET = &quot;\033[0m&quot;;&#10;        StringBuilder bar = new StringBuilder();&#10;        bar.append(GREEN);&#10;        for (int i = 0; i &lt; greenBars; i++) bar.append('=');&#10;        bar.append(RESET);&#10;        bar.append(RED);&#10;        for (int i = 0; i &lt; redBars; i++) bar.append('-');&#10;        bar.append(RESET);&#10;        System.out.print(&quot;\r&quot; + message + &quot; &quot; + bar + &quot; : &quot; + percent + &quot;%&quot;);&#10;    }&#10;&#10;    private boolean silentInstallexe(String exePath, String installDir) {&#10;        try {&#10;            System.out.println(&quot;\nInstalling...&quot;);&#10;            // Show a countdown instead of a progress bar&#10;            for (int i = 5; i &gt; 0; i--) {&#10;                System.out.print(&quot;\rInstallation will complete in &quot; + i + &quot; seconds...&quot;);&#10;                Thread.sleep(1000);&#10;            }&#10;            System.out.print(&quot;\rStarting installation...           \n&quot;);&#10;            Process installProc = new ProcessBuilder(&quot;exeexec&quot;, &quot;/i&quot;, exePath, &quot;/qn&quot;, &quot;INSTALLDIR=&quot; + installDir)&#10;                    .inheritIO().start();&#10;            int exitCode = installProc.waitFor();&#10;            if (exitCode == 0) {&#10;                System.out.println(&quot;exe installed successfully to: &quot; + installDir);&#10;                // Set user PATH to JDK bin&#10;                String binPath = installDir + &quot;\\bin&quot;;&#10;                // Append binPath to existing user PATH&#10;                String currentPath = System.getenv(&quot;PATH&quot;);&#10;                String newPath = currentPath;&#10;                if (!currentPath.contains(binPath)) {&#10;                    newPath = binPath + &quot;;&quot; + currentPath;&#10;                }&#10;                Process setxProc = new ProcessBuilder(&quot;setx&quot;, &quot;PATH&quot;, newPath)&#10;                        .inheritIO().start();&#10;                int setxExit = setxProc.waitFor();&#10;                if (setxExit == 0) {&#10;                    System.out.println(&quot;User PATH updated to include: &quot; + binPath);&#10;                } else {&#10;                    System.err.println(&quot;Failed to update PATH environment variable.&quot;);&#10;                }&#10;                return true;&#10;            } else {&#10;                System.err.println(&quot;exe installation failed with exit code: &quot; + exitCode);&#10;                return false;&#10;            }&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Installation failed: &quot; + e.getMessage());&#10;            return false;&#10;        }&#10;    }&#10;}&#10;&#10;//installation at dir given&#10;//Process installProc = new ProcessBuilder(&#10;//        &quot;powershell&quot;,&#10;//        &quot;-Command&quot;,&#10;//        &quot;Start-Process&quot;,&#10;//        '&quot;' + targetFile + '&quot;',&#10;//        &quot;-ArgumentList&quot;,&#10;//        &quot;'/s', 'INSTALLDIR=\&quot;&quot; + installDir + &quot;\&quot;'&quot;,&#10;//        &quot;-Verb&quot;,&#10;//        &quot;RunAs&quot;&#10;//).inheritIO().start();" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>