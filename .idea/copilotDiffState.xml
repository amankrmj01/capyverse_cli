<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$USER_HOME$/AppData/Local/capyverse/bin/java_config.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$USER_HOME$/AppData/Local/capyverse/bin/java_config.txt" />
              <option name="updatedContent" value="C:\Users\amank\AppData\Local\capyverse\lang\java\jdk-24.0.1&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$USER_HOME$/AppData/Local/capyverse/bin/setup-java.cmd">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$USER_HOME$/AppData/Local/capyverse/bin/setup-java.cmd" />
              <option name="updatedContent" value="@echo off&#10;setlocal enabledelayedexpansion&#10;&#10;set &quot;CONFIG_FILE=%~dp0java_config.txt&quot;&#10;&#10;:: Read JAVA_HOME from config file&#10;if not exist &quot;%CONFIG_FILE%&quot; (&#10;    echo ❌ Config file not found at: &quot;%CONFIG_FILE%&quot;&#10;    exit /b 1&#10;)&#10;&#10;set &quot;JAVA_HOME=&quot;&#10;for /f &quot;usebackq delims=&quot; %%i in (&quot;%CONFIG_FILE%&quot;) do (&#10;    set &quot;JAVA_HOME=%%i&quot;&#10;    goto :found&#10;)&#10;&#10;:found&#10;if not exist &quot;!JAVA_HOME!\bin&quot; (&#10;    echo ❌ Java bin folder not found at &quot;!JAVA_HOME!\bin&quot;&#10;    exit /b 1&#10;)&#10;&#10;:: Generate wrapper scripts for all Java tools&#10;echo Creating command wrappers for Java tools in &quot;!JAVA_HOME!\bin&quot;...&#10;for %%f in (&quot;!JAVA_HOME!\bin\*.exe&quot;) do (&#10;    set &quot;TOOL=%%~nxf&quot;&#10;    &gt;&quot;%~dp0%%~nf.cmd&quot; (&#10;        echo @echo off&#10;        echo &quot;!JAVA_HOME!\bin\%%~nxf&quot; %%*&#10;    )&#10;    echo ✅ Created wrapper: %%~nf.cmd&#10;)&#10;&#10;echo Done.&#10;exit /b 0&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/build.gradle.kts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/build.gradle.kts" />
              <option name="originalContent" value="plugins {&#10;    id(&quot;java&quot;)&#10;    id(&quot;application&quot;)&#10;    id(&quot;org.graalvm.buildtools.native&quot;) version &quot;0.10.1&quot;&#10;}&#10;&#10;group = &quot;com.amankrmj.capyverse&quot;&#10;version = &quot;1.0.0&quot;&#10;&#10;repositories {&#10;    mavenCentral()&#10;}&#10;&#10;dependencies {&#10;    implementation(&quot;info.picocli:picocli:4.7.5&quot;)&#10;    annotationProcessor(&quot;info.picocli:picocli-codegen:4.7.5&quot;)&#10;    &#10;    testImplementation(platform(&quot;org.junit:junit-bom:5.10.0&quot;))&#10;    testImplementation(&quot;org.junit.jupiter:junit-jupiter&quot;)&#10;    testImplementation(&quot;org.mockito:mockito-core:5.5.0&quot;)&#10;    testImplementation(&quot;org.mockito:mockito-junit-jupiter:5.5.0&quot;)&#10;}&#10;&#10;application {&#10;    mainClass.set(&quot;com.amankrmj.capyverse.Main&quot;)&#10;    applicationName = &quot;capyverse_cli&quot;&#10;}&#10;&#10;graalvmNative {&#10;    binaries {&#10;        named(&quot;main&quot;) {&#10;            imageName.set(&quot;capy&quot;)&#10;            mainClass.set(&quot;com.amankrmj.capyverse.Main&quot;)&#10;            useFatJar.set(true)&#10;            &#10;            buildArgs.addAll(&#10;                &quot;--no-fallback&quot;,&#10;                &quot;--report-unsupported-elements-at-runtime&quot;,&#10;                &quot;-H:+ReportExceptionStackTraces&quot;,&#10;                &quot;-H:-CheckToolchain&quot;,&#10;            )&#10;            // For PicoCLI&#10;            buildArgs.add(&quot;-H:ReflectionConfigurationFiles=${project.layout.buildDirectory.get()}/resources/main/META-INF/native-image/reflect-config.json&quot;)&#10;        }&#10;    }&#10;    &#10;    agent {&#10;        defaultMode.set(&quot;standard&quot;)&#10;        builtinCallerFilter.set(true)&#10;        builtinHeuristicFilter.set(true)&#10;        enableExperimentalPredefinedClasses.set(false)&#10;        trackReflectionMetadata.set(true)&#10;    }&#10;}&#10;&#10;tasks.test {&#10;    useJUnitPlatform()&#10;    testLogging {&#10;        events(&quot;passed&quot;, &quot;skipped&quot;, &quot;failed&quot;)&#10;    }&#10;}&#10;&#10;java {&#10;    sourceCompatibility = JavaVersion.VERSION_21&#10;    targetCompatibility = JavaVersion.VERSION_21&#10;    toolchain {&#10;        languageVersion.set(JavaLanguageVersion.of(21))&#10;    }&#10;}&#10;&#10;// Distribution tasks&#10;tasks.register&lt;Copy&gt;(&quot;nativeInstallDist&quot;) {&#10;    dependsOn(&quot;nativeCompile&quot;)&#10;    group = &quot;distribution&quot;&#10;    description = &quot;Creates a distribution with the native executable&quot;&#10;    &#10;    from(&quot;build/native/nativeCompile&quot;) {&#10;        include(&quot;capy.exe&quot;)&#10;        into(&quot;bin&quot;)&#10;    }&#10;    &#10;    into(&quot;build/install/capyverse-native&quot;)&#10;}&#10;&#10;// Custom task to create installer with Inno Setup&#10;tasks.register&lt;Exec&gt;(&quot;createInstaller&quot;) {&#10;    dependsOn(&quot;nativeCompile&quot;)&#10;    group = &quot;distribution&quot;&#10;    description = &quot;Create Windows installer using Inno Setup&quot;&#10;    &#10;    doFirst {&#10;        println(&quot;Creating installer with Inno Setup...&quot;)&#10;    }&#10;    &#10;    commandLine(&#10;        &quot;cmd&quot;,&#10;        &quot;/c&quot;,&#10;        &quot;\&quot;C:\\Program Files (x86)\\Inno Setup 6\\ISCC.exe\&quot;&quot;,&#10;        &quot;installer/capyverse-installer.iss&quot;&#10;    )&#10;    workingDir(projectDir)&#10;    &#10;    doLast {&#10;        println(&quot;Installer created successfully!&quot;)&#10;    }&#10;}&#10;&#10;// Optionally make nativeCompile automatically trigger installer creation&#10;tasks.named(&quot;nativeCompile&quot;) {&#10;    finalizedBy(&quot;createInstaller&quot;)&#10;}&#10;&#10;// Code quality and documentation&#10;tasks.register&lt;Javadoc&gt;(&quot;javadocJar&quot;) {&#10;    group = &quot;documentation&quot;&#10;    description = &quot;Generate Javadoc JAR&quot;&#10;}&#10;&#10;tasks.register&lt;Jar&gt;(&quot;sourcesJar&quot;) {&#10;    group = &quot;documentation&quot;&#10;    description = &quot;Generate sources JAR&quot;&#10;    archiveClassifier.set(&quot;sources&quot;)&#10;    from(sourceSets.main.get().allSource)&#10;}&#10;&#10;tasks.named&lt;JavaExec&gt;(&quot;run&quot;) {&#10;    jvmArgs(&quot;-Dfile.encoding=UTF-8&quot;)&#10;}&#10;" />
              <option name="updatedContent" value="plugins {&#10;    id(&quot;java&quot;)&#10;    id(&quot;application&quot;)&#10;    id(&quot;org.graalvm.buildtools.native&quot;) version &quot;0.10.1&quot;&#10;}&#10;&#10;group = &quot;com.amankrmj.capyverse&quot;&#10;version = &quot;1.0.0&quot;&#10;&#10;repositories {&#10;    mavenCentral()&#10;}&#10;&#10;dependencies {&#10;    implementation(&quot;info.picocli:picocli:4.7.5&quot;)&#10;    annotationProcessor(&quot;info.picocli:picocli-codegen:4.7.5&quot;)&#10;    &#10;    testImplementation(platform(&quot;org.junit:junit-bom:5.10.0&quot;))&#10;    testImplementation(&quot;org.junit.jupiter:junit-jupiter&quot;)&#10;    testImplementation(&quot;org.mockito:mockito-core:5.5.0&quot;)&#10;    testImplementation(&quot;org.mockito:mockito-junit-jupiter:5.5.0&quot;)&#10;}&#10;&#10;application {&#10;    mainClass.set(&quot;com.amankrmj.capyverse.Main&quot;)&#10;    applicationName = &quot;capyverse_cli&quot;&#10;}&#10;&#10;graalvmNative {&#10;    binaries {&#10;        named(&quot;main&quot;) {&#10;            imageName.set(&quot;capy&quot;)&#10;            mainClass.set(&quot;com.amankrmj.capyverse.Main&quot;)&#10;            useFatJar.set(true)&#10;            &#10;            buildArgs.addAll(&#10;                &quot;--no-fallback&quot;,&#10;                &quot;--report-unsupported-elements-at-runtime&quot;,&#10;                &quot;-H:+ReportExceptionStackTraces&quot;,&#10;                &quot;-H:-CheckToolchain&quot;,&#10;                &quot;--enable-url-protocols=http&quot;&#10;            )&#10;            // For PicoCLI&#10;            buildArgs.add(&quot;-H:ReflectionConfigurationFiles=${project.layout.buildDirectory.get()}/resources/main/META-INF/native-image/reflect-config.json&quot;)&#10;        }&#10;    }&#10;    &#10;    agent {&#10;        defaultMode.set(&quot;standard&quot;)&#10;        builtinCallerFilter.set(true)&#10;        builtinHeuristicFilter.set(true)&#10;        enableExperimentalPredefinedClasses.set(false)&#10;        trackReflectionMetadata.set(true)&#10;    }&#10;}&#10;&#10;tasks.test {&#10;    useJUnitPlatform()&#10;    testLogging {&#10;        events(&quot;passed&quot;, &quot;skipped&quot;, &quot;failed&quot;)&#10;    }&#10;}&#10;&#10;java {&#10;    sourceCompatibility = JavaVersion.VERSION_21&#10;    targetCompatibility = JavaVersion.VERSION_21&#10;    toolchain {&#10;        languageVersion.set(JavaLanguageVersion.of(21))&#10;    }&#10;}&#10;&#10;// Distribution tasks&#10;tasks.register&lt;Copy&gt;(&quot;nativeInstallDist&quot;) {&#10;    dependsOn(&quot;nativeCompile&quot;)&#10;    group = &quot;distribution&quot;&#10;    description = &quot;Creates a distribution with the native executable&quot;&#10;    &#10;    from(&quot;build/native/nativeCompile&quot;) {&#10;        include(&quot;capy.exe&quot;)&#10;        into(&quot;bin&quot;)&#10;    }&#10;    &#10;    into(&quot;build/install/capyverse-native&quot;)&#10;}&#10;&#10;// Custom task to create installer with Inno Setup&#10;tasks.register&lt;Exec&gt;(&quot;createInstaller&quot;) {&#10;    dependsOn(&quot;nativeCompile&quot;)&#10;    group = &quot;distribution&quot;&#10;    description = &quot;Create Windows installer using Inno Setup&quot;&#10;    &#10;    doFirst {&#10;        println(&quot;Creating installer with Inno Setup...&quot;)&#10;    }&#10;    &#10;    commandLine(&#10;        &quot;cmd&quot;,&#10;        &quot;/c&quot;,&#10;        &quot;\&quot;C:\\Program Files (x86)\\Inno Setup 6\\ISCC.exe\&quot;&quot;,&#10;        &quot;installer/capyverse-installer.iss&quot;&#10;    )&#10;    workingDir(projectDir)&#10;    &#10;    doLast {&#10;        println(&quot;Installer created successfully!&quot;)&#10;    }&#10;}&#10;&#10;// Optionally make nativeCompile automatically trigger installer creation&#10;tasks.named(&quot;nativeCompile&quot;) {&#10;    finalizedBy(&quot;createInstaller&quot;)&#10;}&#10;&#10;// Code quality and documentation&#10;tasks.register&lt;Javadoc&gt;(&quot;javadocJar&quot;) {&#10;    group = &quot;documentation&quot;&#10;    description = &quot;Generate Javadoc JAR&quot;&#10;}&#10;&#10;tasks.register&lt;Jar&gt;(&quot;sourcesJar&quot;) {&#10;    group = &quot;documentation&quot;&#10;    description = &quot;Generate sources JAR&quot;&#10;    archiveClassifier.set(&quot;sources&quot;)&#10;    from(sourceSets.main.get().allSource)&#10;}&#10;&#10;tasks.named&lt;JavaExec&gt;(&quot;run&quot;) {&#10;    jvmArgs(&quot;-Dfile.encoding=UTF-8&quot;)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>