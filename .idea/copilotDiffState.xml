<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$USER_HOME$/AppData/Local/capyverse/bin/java_config.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$USER_HOME$/AppData/Local/capyverse/bin/java_config.txt" />
              <option name="updatedContent" value="C:\Users\amank\AppData\Local\capyverse\lang\java\jdk-24.0.1&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$USER_HOME$/AppData/Local/capyverse/bin/setup-java.cmd">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$USER_HOME$/AppData/Local/capyverse/bin/setup-java.cmd" />
              <option name="updatedContent" value="@echo off&#10;setlocal enabledelayedexpansion&#10;&#10;set &quot;CONFIG_FILE=%~dp0java_config.txt&quot;&#10;&#10;:: Read JAVA_HOME from config file&#10;if not exist &quot;%CONFIG_FILE%&quot; (&#10;    echo ❌ Config file not found at: &quot;%CONFIG_FILE%&quot;&#10;    exit /b 1&#10;)&#10;&#10;set &quot;JAVA_HOME=&quot;&#10;for /f &quot;usebackq delims=&quot; %%i in (&quot;%CONFIG_FILE%&quot;) do (&#10;    set &quot;JAVA_HOME=%%i&quot;&#10;    goto :found&#10;)&#10;&#10;:found&#10;if not exist &quot;!JAVA_HOME!\bin&quot; (&#10;    echo ❌ Java bin folder not found at &quot;!JAVA_HOME!\bin&quot;&#10;    exit /b 1&#10;)&#10;&#10;:: Generate wrapper scripts for all Java tools&#10;echo Creating command wrappers for Java tools in &quot;!JAVA_HOME!\bin&quot;...&#10;for %%f in (&quot;!JAVA_HOME!\bin\*.exe&quot;) do (&#10;    set &quot;TOOL=%%~nxf&quot;&#10;    &gt;&quot;%~dp0%%~nf.cmd&quot; (&#10;        echo @echo off&#10;        echo &quot;!JAVA_HOME!\bin\%%~nxf&quot; %%*&#10;    )&#10;    echo ✅ Created wrapper: %%~nf.cmd&#10;)&#10;&#10;echo Done.&#10;exit /b 0&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/amankrmj/capyverse/java/InstallJavaVersionCommand.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/amankrmj/capyverse/java/InstallJavaVersionCommand.java" />
              <option name="originalContent" value="package com.amankrmj.capyverse.java;&#10;&#10;import picocli.CommandLine.Command;&#10;import picocli.CommandLine.Option;&#10;import picocli.CommandLine.Parameters;&#10;&#10;import java.io.*;&#10;import java.net.URI;&#10;import java.net.http.HttpClient;&#10;import java.net.http.HttpRequest;&#10;import java.net.http.HttpResponse;&#10;import java.util.concurrent.Callable;&#10;import java.util.zip.ZipEntry;&#10;import java.util.zip.ZipInputStream;&#10;&#10;/**&#10; * Downloads, installs, and configures a Java JDK for Capyverse usage.&#10; */&#10;@Command(&#10;        name = &quot;install&quot;,&#10;        description = &quot;Install a specific Java version.&quot;&#10;)&#10;public class InstallJavaVersionCommand implements Callable&lt;Integer&gt; {&#10;&#10;    @Option(&#10;            names = {&quot;-v&quot;},&#10;            description = &quot;Download and install Oracle JDK exe for the specified version&quot;&#10;    )&#10;    private boolean v = false;&#10;&#10;    @Parameters(&#10;            index = &quot;0&quot;,&#10;            description = &quot;Java version to install (e.g., 17, 21, 11-graalvm)&quot;,&#10;            arity = &quot;0..1&quot;&#10;    )&#10;    private String version;&#10;&#10;    @Override&#10;    public Integer call() {&#10;        if (v) {&#10;            return installJavaVersion(version);&#10;        }&#10;        System.err.println(&quot;Please use -v to download and install a Java version.&quot;);&#10;        return 1;&#10;    }&#10;&#10;    /**&#10;     * Gets the JDK download URL for the given version from the local server.&#10;     */&#10;    private String fetchJdkUrlFromServer(String version) {&#10;        try {&#10;            String endpoint = &quot;http://localhost:8080/javaversions?version=&quot; + version;&#10;            HttpClient client = HttpClient.newHttpClient();&#10;            HttpRequest request = HttpRequest.newBuilder()&#10;                    .uri(URI.create(endpoint))&#10;                    .GET()&#10;                    .build();&#10;            HttpResponse&lt;String&gt; response = client.send(request, HttpResponse.BodyHandlers.ofString());&#10;            if (response.statusCode() == 200) {&#10;                return response.body().trim(); // plain URL string&#10;            } else {&#10;                System.err.println(&quot;Failed to fetch JDK URL. Status: &quot; + response.statusCode());&#10;            }&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error fetching JDK URL: &quot; + e.getMessage());&#10;        }&#10;        return null;&#10;    }&#10;&#10;    private Integer installJavaVersion(String version) {&#10;        final String userProfile = System.getenv(&quot;USERPROFILE&quot;);&#10;        // Get the download URL from the local server&#10;        String zipUrl = fetchJdkUrlFromServer(version);&#10;        if (zipUrl == null || zipUrl.isEmpty()) {&#10;            System.err.println(&quot;Could not get JDK download URL for version: &quot; + version);&#10;            return 1;&#10;        }&#10;        // Note: You can generalize the URLs and file-version logic as needed.&#10;        final String targetDir = userProfile + &quot;\\AppData\\Local\\capyverse\\cache\\java\\downloads&quot;;&#10;        final String targetFile = targetDir + &quot;\\jdk-&quot; + version + &quot;.zip&quot;;&#10;        final String installDir = userProfile + &quot;\\AppData\\Local\\capyverse\\lang\\java&quot;;&#10;        final String binPath = installDir + &quot;\\jdk-&quot; + version + &quot;\\bin&quot;;&#10;        final String wrapperDir = userProfile + &quot;\\AppData\\Local\\capyverse\\bin&quot;;&#10;&#10;        // Ensure directories exist&#10;        new File(targetDir).mkdirs();&#10;        new File(installDir).mkdirs();&#10;        new File(wrapperDir).mkdirs();&#10;&#10;        try {&#10;            System.out.println(&quot;⬇️  Downloading Java JDK...&quot;);&#10;            downloadFileWithBar(zipUrl, targetFile);&#10;&#10;            System.out.println(&quot;️  Extracting...&quot;);&#10;            unzip(targetFile, installDir);&#10;&#10;            // Write configuration file&#10;            writeJavaConfig(new File(installDir, &quot;java_config.txt&quot;), binPath);&#10;&#10;            // Generate batch setup script&#10;            writeSetupCmd(new File(installDir, &quot;setup_java.cmd&quot;));&#10;&#10;            // Generate launch wrappers in wrapperDir&#10;//            generateJavaToolWrappers(binPath, wrapperDir);&#10;&#10;&#10;            System.out.println(&quot;✅ Java installed successfully!&quot;);&#10;            return 0;&#10;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot; Installation failed: &quot; + e.getMessage());&#10;            return 1;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Downloads a file from a given URL, saving it at filePath, with progress bar.&#10;     */&#10;    private void downloadFileWithBar(String urlStr, String filePath) throws IOException, InterruptedException {&#10;        // Use HttpClient for better reliability and compatibility&#10;        java.net.http.HttpClient client = java.net.http.HttpClient.newBuilder().build();&#10;        java.net.http.HttpRequest request = java.net.http.HttpRequest.newBuilder()&#10;                .uri(java.net.URI.create(urlStr))&#10;                .GET()&#10;                .build();&#10;        java.net.http.HttpResponse&lt;InputStream&gt; response = client.send(request, java.net.http.HttpResponse.BodyHandlers.ofInputStream());&#10;        int fileSize = 0;&#10;        if (response.headers().firstValue(&quot;Content-Length&quot;).isPresent()) {&#10;            try {&#10;                fileSize = Integer.parseInt(response.headers().firstValue(&quot;Content-Length&quot;).get());&#10;            } catch (NumberFormatException ignored) {&#10;            }&#10;        }&#10;        InputStream in = response.body();&#10;        try (FileOutputStream out = new FileOutputStream(filePath)) {&#10;            byte[] buffer = new byte[8192];&#10;            int totalRead = 0, lastPercent = -1;&#10;            int bytesRead;&#10;            while ((bytesRead = in.read(buffer)) != -1) {&#10;                out.write(buffer, 0, bytesRead);&#10;                totalRead += bytesRead;&#10;                if (fileSize &gt; 0) {&#10;                    int percent = (int) ((totalRead * 100L) / fileSize);&#10;                    if (percent != lastPercent) {&#10;                        printProgressBar(percent);&#10;                        lastPercent = percent;&#10;                    }&#10;                }&#10;            }&#10;            printProgressBar(100);&#10;            System.out.println();&#10;        } finally {&#10;            in.close();&#10;        }&#10;    }&#10;&#10;    private void printProgressBar(int percent) {&#10;        final int barLength = 50;&#10;        int filled = (percent * barLength) / 100;&#10;        System.out.print(&quot;\r[&quot;);&#10;        String GREEN = &quot;\u001B[32m&quot;;&#10;        String RED = &quot;\u001B[31m&quot;;&#10;        String YELLOW = &quot;\u001B[33m&quot;;&#10;        String RESET = &quot;\u001B[0m&quot;;&#10;        for (int i = 0; i &lt; barLength; i++) {&#10;            if (i &lt; filled) {&#10;                System.out.print(GREEN + &quot;=&quot; + RESET);&#10;            } else {&#10;                System.out.print(RED + &quot;-&quot; + RESET);&#10;            }&#10;        }&#10;        System.out.print(&quot;] &quot;);&#10;        System.out.print(YELLOW + percent + &quot;%&quot; + RESET);&#10;    }&#10;&#10;    /**&#10;     * Unzips an archive into a target directory.&#10;     * Strips leading folder if needed.&#10;     */&#10;    private void unzip(String zipFilePath, String destDir) throws IOException {&#10;        try (ZipInputStream zis = new ZipInputStream(new FileInputStream(zipFilePath))) {&#10;            ZipEntry entry;&#10;            while ((entry = zis.getNextEntry()) != null) {&#10;                File outFile = new File(destDir, entry.getName());&#10;                if (entry.isDirectory()) {&#10;                    outFile.mkdirs();&#10;                } else {&#10;                    outFile.getParentFile().mkdirs();&#10;                    try (FileOutputStream fos = new FileOutputStream(outFile)) {&#10;                        byte[] buffer = new byte[8192];&#10;                        int len;&#10;                        while ((len = zis.read(buffer)) &gt; 0) {&#10;                            fos.write(buffer, 0, len);&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Writes a configuration text file for java path.&#10;     */&#10;    private void writeJavaConfig(File configFile, String binPath) throws IOException {&#10;        try (PrintWriter writer = new PrintWriter(configFile, &quot;UTF-8&quot;)) {&#10;            writer.println(binPath);&#10;//            writer.println(&quot;installed_by=CapyverseInstaller&quot;);&#10;        }&#10;        System.out.println(&quot; Wrote configuration: &quot; + configFile.getAbsolutePath());&#10;    }&#10;&#10;    /**&#10;     * Writes a batch script (setup_java.cmd) for setting JAVA_HOME and PATH.&#10;     */&#10;    private void writeSetupCmd(File scriptFile) throws IOException {&#10;        try (PrintWriter writer = new PrintWriter(scriptFile, &quot;UTF-8&quot;)) {&#10;            writer.println(&quot;@echo off&quot;);&#10;            writer.println(&quot;setlocal enabledelayedexpansion&quot;);&#10;            writer.println();&#10;            writer.println(&quot;set \&quot;CONFIG_FILE=%~dp0java_config.txt\&quot;&quot;);&#10;            writer.println();&#10;            writer.println(&quot;:: Read JAVA_HOME from config file&quot;);&#10;            writer.println(&quot;if not exist \&quot;%CONFIG_FILE%\&quot; (&quot;);&#10;            writer.println(&quot;    echo ❌ Config file not found at: \&quot;%CONFIG_FILE%\&quot;&quot;);&#10;            writer.println(&quot;    exit /b 1&quot;);&#10;            writer.println(&quot;)&quot;);&#10;            writer.println();&#10;            writer.println(&quot;set \&quot;JAVA_HOME=\&quot;&quot;);&#10;            writer.println(&quot;for /f \&quot;usebackq delims=\&quot; %%i in (\&quot;%CONFIG_FILE%\&quot;) do (&quot;);&#10;            writer.println(&quot;    set \&quot;JAVA_HOME=%%i\&quot;&quot;);&#10;            writer.println(&quot;    goto :found&quot;);&#10;            writer.println(&quot;)&quot;);&#10;            writer.println();&#10;            writer.println(&quot;:found&quot;);&#10;            writer.println(&quot;if not exist \&quot;!JAVA_HOME!\\bin\&quot; (&quot;);&#10;            writer.println(&quot;    echo ❌ Java bin folder not found at \&quot;!JAVA_HOME!\\bin\&quot;&quot;);&#10;            writer.println(&quot;    exit /b 1&quot;);&#10;            writer.println(&quot;)&quot;);&#10;            writer.println();&#10;            writer.println(&quot;:: Resolve target folder: ../../bin relative to JAVA_HOME&quot;);&#10;            writer.println(&quot;set \&quot;TARGET_DIR=!JAVA_HOME!\\..\\..\\..\\bin\&quot;&quot;);&#10;            writer.println(&quot;for %%d in (\&quot;!TARGET_DIR!\&quot;) do set \&quot;TARGET_DIR=%%~fd\&quot;&quot;);&#10;            writer.println();&#10;            writer.println(&quot;:: Create target directory if missing&quot;);&#10;            writer.println(&quot;if not exist \&quot;!TARGET_DIR!\&quot; (&quot;);&#10;            writer.println(&quot;    echo  Creating target directory: \&quot;!TARGET_DIR!\&quot;&quot;);&#10;            writer.println(&quot;    mkdir \&quot;!TARGET_DIR!\&quot; || (&quot;);&#10;            writer.println(&quot;        echo ❌ Failed to create target directory.&quot;);&#10;            writer.println(&quot;        exit /b 1&quot;);&#10;            writer.println(&quot;    )&quot;);&#10;            writer.println(&quot;)&quot;);&#10;            writer.println();&#10;            writer.println(&quot;:: Generate wrapper scripts in TARGET_DIR&quot;);&#10;            writer.println(&quot;echo Creating command wrappers in \&quot;!TARGET_DIR!\&quot;...&quot;);&#10;            writer.println(&quot;for %%f in (\&quot;!JAVA_HOME!\\bin\\*.exe\&quot;) do (&quot;);&#10;            writer.println(&quot;    &gt;\&quot;!TARGET_DIR!\\%%~nf.cmd\&quot; (&quot;);&#10;            writer.println(&quot;        echo @echo off&quot;);&#10;            writer.println(&quot;        echo \&quot;%JAVA_HOME%\\bin\\%%~nxf\&quot; %%*&quot;);&#10;            writer.println(&quot;    )&quot;);&#10;            writer.println(&quot;    echo ✅ Created wrapper: %%~nf.cmd&quot;);&#10;            writer.println(&quot;)&quot;);&#10;            writer.println();&#10;            writer.println(&quot;echo  Done — wrappers are in \&quot;!TARGET_DIR!\&quot;&quot;);&#10;            writer.println(&quot;exit /b 0&quot;);&#10;        }&#10;        System.out.println(&quot;⚙️  Wrote batch script: &quot; + scriptFile.getAbsolutePath());&#10;    }&#10;&#10;//    private void generateJavaToolWrappers(String binPath, String wrapperDir) {&#10;//        File binFolder = new File(binPath);&#10;//        File[] exeFiles = binFolder.listFiles((dir, name) -&gt; name.endsWith(&quot;.exe&quot;));&#10;//        if (exeFiles == null) return;&#10;//&#10;//        for (File exe : exeFiles) {&#10;//            String toolName = exe.getName().replaceFirst(&quot;\\.exe$&quot;, &quot;&quot;);&#10;//            File wrapper = new File(wrapperDir, toolName + &quot;.cmd&quot;);&#10;//            try (PrintWriter pw = new PrintWriter(wrapper, &quot;UTF-8&quot;)) {&#10;//                pw.println(&quot;@echo off&quot;);&#10;//                pw.println(&quot;\&quot;&quot; + exe.getAbsolutePath() + &quot;\&quot; %*&quot;);&#10;//            } catch (Exception e) {&#10;//                System.err.printf(&quot;Failed to create wrapper for %s: %s%n&quot;, exe.getName(), e.getMessage());&#10;//            }&#10;//            System.out.println(&quot;✅ Created wrapper: &quot; + wrapper.getAbsolutePath());&#10;//        }&#10;//        System.out.println(&quot; All Java tool wrappers created in: &quot; + wrapperDir);&#10;//    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.amankrmj.capyverse.java;&#10;&#10;import picocli.CommandLine.Command;&#10;import picocli.CommandLine.Option;&#10;import picocli.CommandLine.Parameters;&#10;&#10;import java.io.*;&#10;import java.net.URI;&#10;import java.net.http.HttpClient;&#10;import java.net.http.HttpRequest;&#10;import java.net.http.HttpResponse;&#10;import java.util.concurrent.Callable;&#10;import java.util.zip.ZipEntry;&#10;import java.util.zip.ZipInputStream;&#10;&#10;/**&#10; * Downloads, installs, and configures a Java JDK for Capyverse usage.&#10; */&#10;@Command(&#10;        name = &quot;install&quot;,&#10;        description = &quot;Install a specific Java version.&quot;&#10;)&#10;public class InstallJavaVersionCommand implements Callable&lt;Integer&gt; {&#10;&#10;    @Option(&#10;            names = {&quot;-v&quot;},&#10;            description = &quot;Download and install Oracle JDK exe for the specified version&quot;&#10;    )&#10;    private boolean v = false;&#10;&#10;    @Parameters(&#10;            index = &quot;0&quot;,&#10;            description = &quot;Java version to install (e.g., 17, 21, 11-graalvm)&quot;,&#10;            arity = &quot;0..1&quot;&#10;    )&#10;    private String version;&#10;&#10;    @Override&#10;    public Integer call() {&#10;        if (v) {&#10;            return installJavaVersion(version);&#10;        }&#10;        System.err.println(&quot;Please use -v to download and install a Java version.&quot;);&#10;        return 1;&#10;    }&#10;&#10;    /**&#10;     * Gets the JDK download URL for the given version from the local server.&#10;     */&#10;    private String fetchJdkUrlFromServer(String version) {&#10;        try {&#10;            String endpoint = &quot;http://localhost:8080/javaversions?version=&quot; + version;&#10;            HttpClient client = HttpClient.newHttpClient();&#10;            HttpRequest request = HttpRequest.newBuilder()&#10;                    .uri(URI.create(endpoint))&#10;                    .GET()&#10;                    .build();&#10;            HttpResponse&lt;String&gt; response = client.send(request, HttpResponse.BodyHandlers.ofString());&#10;            if (response.statusCode() == 200) {&#10;                return response.body().trim(); // plain URL string&#10;            } else {&#10;                System.err.println(&quot;Failed to fetch JDK URL. Status: &quot; + response.statusCode());&#10;            }&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error fetching JDK URL: &quot; + e.getMessage());&#10;        }&#10;        return null;&#10;    }&#10;&#10;    private Integer installJavaVersion(String version) {&#10;        final String userProfile = System.getenv(&quot;USERPROFILE&quot;);&#10;        // Get the download URL from the local server&#10;        String zipUrl = fetchJdkUrlFromServer(version);&#10;        if (zipUrl == null || zipUrl.isEmpty()) {&#10;            System.err.println(&quot;Could not get JDK download URL for version: &quot; + version);&#10;            return 1;&#10;        }&#10;        // Note: You can generalize the URLs and file-version logic as needed.&#10;        final String targetDir = userProfile + &quot;\\AppData\\Local\\capyverse\\cache\\java\\downloads&quot;;&#10;        final String targetFile = targetDir + &quot;\\jdk-&quot; + version + &quot;.zip&quot;;&#10;        final String installDir = userProfile + &quot;\\AppData\\Local\\capyverse\\lang\\java&quot;;&#10;        final String binPath = installDir + &quot;\\jdk-&quot; + version + &quot;\\bin&quot;;&#10;        final String wrapperDir = userProfile + &quot;\\AppData\\Local\\capyverse\\bin&quot;;&#10;&#10;        // Ensure directories exist&#10;        new File(targetDir).mkdirs();&#10;        new File(installDir).mkdirs();&#10;        new File(wrapperDir).mkdirs();&#10;&#10;        try {&#10;            System.out.println(&quot;⬇️  Downloading Java JDK...&quot;);&#10;            downloadFileWithBar(zipUrl, targetFile);&#10;&#10;            System.out.println(&quot;️  Extracting...&quot;);&#10;            unzip(targetFile, installDir);&#10;&#10;            // Write configuration file&#10;            File configFile = new File(installDir, &quot;java_config.txt&quot;);&#10;            if (configFile.exists()) {&#10;                System.out.println(&quot;ℹ️  Config file already exists: &quot; + configFile.getAbsolutePath());&#10;            }&#10;            writeJavaConfig(configFile, binPath);&#10;&#10;            // Generate batch setup script&#10;            File setupCmdFile = new File(installDir, &quot;setup_java.cmd&quot;);&#10;            if (setupCmdFile.exists()) {&#10;                System.out.println(&quot;ℹ️  Batch setup script already exists: &quot; + setupCmdFile.getAbsolutePath());&#10;            }&#10;            writeSetupCmd(setupCmdFile, binPath);&#10;&#10;            // Generate launch wrappers in wrapperDir&#10;//            generateJavaToolWrappers(binPath, wrapperDir);&#10;&#10;&#10;            System.out.println(&quot;✅ Java installed successfully!&quot;);&#10;            return 0;&#10;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot; Installation failed: &quot; + e.getMessage());&#10;            return 1;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Downloads a file from a given URL, saving it at filePath, with progress bar.&#10;     */&#10;    private void downloadFileWithBar(String urlStr, String filePath) throws IOException, InterruptedException {&#10;        // Use HttpClient for better reliability and compatibility&#10;        java.net.http.HttpClient client = java.net.http.HttpClient.newBuilder().build();&#10;        java.net.http.HttpRequest request = java.net.http.HttpRequest.newBuilder()&#10;                .uri(java.net.URI.create(urlStr))&#10;                .GET()&#10;                .build();&#10;        java.net.http.HttpResponse&lt;InputStream&gt; response = client.send(request, java.net.http.HttpResponse.BodyHandlers.ofInputStream());&#10;        int fileSize = 0;&#10;        if (response.headers().firstValue(&quot;Content-Length&quot;).isPresent()) {&#10;            try {&#10;                fileSize = Integer.parseInt(response.headers().firstValue(&quot;Content-Length&quot;).get());&#10;            } catch (NumberFormatException ignored) {&#10;            }&#10;        }&#10;        InputStream in = response.body();&#10;        try (FileOutputStream out = new FileOutputStream(filePath)) {&#10;            byte[] buffer = new byte[8192];&#10;            int totalRead = 0, lastPercent = -1;&#10;            int bytesRead;&#10;            while ((bytesRead = in.read(buffer)) != -1) {&#10;                out.write(buffer, 0, bytesRead);&#10;                totalRead += bytesRead;&#10;                if (fileSize &gt; 0) {&#10;                    int percent = (int) ((totalRead * 100L) / fileSize);&#10;                    if (percent != lastPercent) {&#10;                        printProgressBar(percent);&#10;                        lastPercent = percent;&#10;                    }&#10;                }&#10;            }&#10;            printProgressBar(100);&#10;            System.out.println();&#10;        } finally {&#10;            in.close();&#10;        }&#10;    }&#10;&#10;    private void printProgressBar(int percent) {&#10;        final int barLength = 50;&#10;        int filled = (percent * barLength) / 100;&#10;        System.out.print(&quot;\r[&quot;);&#10;        String GREEN = &quot;\u001B[32m&quot;;&#10;        String RED = &quot;\u001B[31m&quot;;&#10;        String YELLOW = &quot;\u001B[33m&quot;;&#10;        String RESET = &quot;\u001B[0m&quot;;&#10;        for (int i = 0; i &lt; barLength; i++) {&#10;            if (i &lt; filled) {&#10;                System.out.print(GREEN + &quot;=&quot; + RESET);&#10;            } else {&#10;                System.out.print(RED + &quot;-&quot; + RESET);&#10;            }&#10;        }&#10;        System.out.print(&quot;] &quot;);&#10;        System.out.print(YELLOW + percent + &quot;%&quot; + RESET);&#10;    }&#10;&#10;    /**&#10;     * Unzips an archive into a target directory.&#10;     * Strips leading folder if needed.&#10;     */&#10;    private void unzip(String zipFilePath, String destDir) throws IOException {&#10;        try (ZipInputStream zis = new ZipInputStream(new FileInputStream(zipFilePath))) {&#10;            ZipEntry entry;&#10;            while ((entry = zis.getNextEntry()) != null) {&#10;                File outFile = new File(destDir, entry.getName());&#10;                if (entry.isDirectory()) {&#10;                    outFile.mkdirs();&#10;                } else {&#10;                    outFile.getParentFile().mkdirs();&#10;                    try (FileOutputStream fos = new FileOutputStream(outFile)) {&#10;                        byte[] buffer = new byte[8192];&#10;                        int len;&#10;                        while ((len = zis.read(buffer)) &gt; 0) {&#10;                            fos.write(buffer, 0, len);&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Writes a configuration text file for java path.&#10;     */&#10;    private void writeJavaConfig(File configFile, String binPath) throws IOException {&#10;        try (PrintWriter writer = new PrintWriter(configFile, &quot;UTF-8&quot;)) {&#10;            writer.println(binPath);&#10;//            writer.println(&quot;installed_by=CapyverseInstaller&quot;);&#10;        }&#10;        System.out.println(&quot; Wrote configuration: &quot; + configFile.getAbsolutePath());&#10;    }&#10;&#10;    /**&#10;     * Writes a batch script (setup_java.cmd) for setting JAVA_HOME and PATH.&#10;     */&#10;    private void writeSetupCmd(File scriptFile, String binPath) throws IOException {&#10;        try (PrintWriter writer = new PrintWriter(scriptFile, &quot;UTF-8&quot;)) {&#10;            writer.println(&quot;@echo off&quot;);&#10;            writer.println(&quot;setlocal enabledelayedexpansion&quot;);&#10;            writer.println();&#10;            writer.println(&quot;set \&quot;CONFIG_FILE=%~dp0java_config.txt\&quot;&quot;);&#10;            writer.println();&#10;            writer.println(&quot;:: Read JAVA_HOME from config file&quot;);&#10;            writer.println(&quot;if not exist \&quot;%CONFIG_FILE%\&quot; (&quot;);&#10;            writer.println(&quot;    echo ❌ Config file not found at: \&quot;%CONFIG_FILE%\&quot;&quot;);&#10;            writer.println(&quot;    exit /b 1&quot;);&#10;            writer.println(&quot;)&quot;);&#10;            writer.println();&#10;            writer.println(&quot;set \&quot;JAVA_HOME=\&quot;&quot;);&#10;            writer.println(&quot;for /f \&quot;usebackq delims=\&quot; %%i in (\&quot;%CONFIG_FILE%\&quot;) do (&quot;);&#10;            writer.println(&quot;    set \&quot;JAVA_HOME=%%i\&quot;&quot;);&#10;            writer.println(&quot;    goto :found&quot;);&#10;            writer.println(&quot;)&quot;);&#10;            writer.println();&#10;            writer.println(&quot;:found&quot;);&#10;            writer.println(&quot;if not exist \&quot;!JAVA_HOME!\\bin\&quot; (&quot;);&#10;            writer.println(&quot;    echo ❌ Java bin folder not found at \&quot;!JAVA_HOME!\\bin\&quot;&quot;);&#10;            writer.println(&quot;    exit /b 1&quot;);&#10;            writer.println(&quot;)&quot;);&#10;            writer.println();&#10;            writer.println(&quot;:: Resolve target folder: ../../bin relative to JAVA_HOME&quot;);&#10;            writer.println(&quot;set \&quot;TARGET_DIR=!JAVA_HOME!\\..\\..\\..\\bin\&quot;&quot;);&#10;            writer.println(&quot;for %%d in (\&quot;!TARGET_DIR!\&quot;) do set \&quot;TARGET_DIR=%%~fd\&quot;&quot;);&#10;            writer.println();&#10;            writer.println(&quot;:: Create target directory if missing&quot;);&#10;            writer.println(&quot;if not exist \&quot;!TARGET_DIR!\&quot; (&quot;);&#10;            writer.println(&quot;    echo  Creating target directory: \&quot;!TARGET_DIR!\&quot;&quot;);&#10;            writer.println(&quot;    mkdir \&quot;!TARGET_DIR!\&quot; || (&quot;);&#10;            writer.println(&quot;        echo ❌ Failed to create target directory.&quot;);&#10;            writer.println(&quot;        exit /b 1&quot;);&#10;            writer.println(&quot;    )&quot;);&#10;            writer.println(&quot;)&quot;);&#10;            writer.println();&#10;            writer.println(&quot;:: Generate wrapper scripts in TARGET_DIR&quot;);&#10;            writer.println(&quot;echo Creating command wrappers in \&quot;!TARGET_DIR!\&quot;...&quot;);&#10;            writer.println(&quot;for %%f in (\&quot;!JAVA_HOME!\\bin\\*.exe\&quot;) do (&quot;);&#10;            writer.println(&quot;    &gt;\&quot;!TARGET_DIR!\\%%~nf.cmd\&quot; (&quot;);&#10;            writer.println(&quot;        echo @echo off&quot;);&#10;            writer.println(&quot;        echo \&quot;%JAVA_HOME%\\bin\\%%~nxf\&quot; %%*&quot;);&#10;            writer.println(&quot;    )&quot;);&#10;            writer.println(&quot;    echo ✅ Created wrapper: %%~nf.cmd&quot;);&#10;            writer.println(&quot;)&quot;);&#10;            writer.println();&#10;            writer.println(&quot;echo  Done — wrappers are in \&quot;!TARGET_DIR!\&quot;&quot;);&#10;            writer.println(&quot;exit /b 0&quot;);&#10;        }&#10;        System.out.println(&quot;⚙️  Wrote batch script: &quot; + scriptFile.getAbsolutePath());&#10;    }&#10;&#10;//    private void generateJavaToolWrappers(String binPath, String wrapperDir) {&#10;//        File binFolder = new File(binPath);&#10;//        File[] exeFiles = binFolder.listFiles((dir, name) -&gt; name.endsWith(&quot;.exe&quot;));&#10;//        if (exeFiles == null) return;&#10;//&#10;//        for (File exe : exeFiles) {&#10;//            String toolName = exe.getName().replaceFirst(&quot;\\.exe$&quot;, &quot;&quot;);&#10;//            File wrapper = new File(wrapperDir, toolName + &quot;.cmd&quot;);&#10;//            try (PrintWriter pw = new PrintWriter(wrapper, &quot;UTF-8&quot;)) {&#10;//                pw.println(&quot;@echo off&quot;);&#10;//                pw.println(&quot;\&quot;&quot; + exe.getAbsolutePath() + &quot;\&quot; %*&quot;);&#10;//            } catch (Exception e) {&#10;//                System.err.printf(&quot;Failed to create wrapper for %s: %s%n&quot;, exe.getName(), e.getMessage());&#10;//            }&#10;//            System.out.println(&quot;✅ Created wrapper: &quot; + wrapper.getAbsolutePath());&#10;//        }&#10;//        System.out.println(&quot; All Java tool wrappers created in: &quot; + wrapperDir);&#10;//    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/amankrmj/capyverse/java/ListJavaVersionsCommand.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/amankrmj/capyverse/java/ListJavaVersionsCommand.java" />
              <option name="originalContent" value="package com.amankrmj.capyverse.java;&#10;&#10;import picocli.CommandLine.Command;&#10;import picocli.CommandLine.Option;&#10;&#10;import java.io.BufferedReader;&#10;import java.io.File;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.io.InputStreamReader;&#10;import java.net.HttpURLConnection;&#10;import java.net.URL;&#10;import java.util.concurrent.Callable;&#10;&#10;@Command(name = &quot;list&quot;, description = &quot;List all installed Java versions&quot;)&#10;public class ListJavaVersionsCommand implements Callable&lt;Integer&gt; {&#10;    private List&lt;String&gt; versionsInstalled = new ArrayList&lt;&gt;();&#10;&#10;    @Option(names = {&quot;-i&quot;}, description = &quot;List managed Java versions from server&quot;)&#10;    private boolean showManaged = false;&#10;&#10;    private void listLocalJavaVersions() {&#10;        String userProfile = System.getenv(&quot;USERPROFILE&quot;);&#10;        File javaDir = new File(userProfile + &quot;\\AppData\\Local\\capyverse\\lang\\java&quot;);&#10;        File[] folders = javaDir.listFiles(File::isDirectory);&#10;        if (folders != null &amp;&amp; folders.length &gt; 0) {&#10;            System.out.println(&quot;=== Locally Installed Java Versions ===&quot;);&#10;            String GREEN = &quot;\u001B[32m&quot;;&#10;            String RESET = &quot;\u001B[0m&quot;;&#10;            for (File folder : folders) {&#10;                String name = folder.getName();&#10;                int dashIdx = name.indexOf('-');&#10;                if (dashIdx != -1 &amp;&amp; dashIdx &lt; name.length() - 1) {&#10;                    String version = name.substring(dashIdx + 1);&#10;                    versionsInstalled.add(version.trim());&#10;                    System.out.println(GREEN + &quot;\t\t&quot; + version + RESET);&#10;                }&#10;            }&#10;        } else {&#10;            System.out.println(&quot;No local Java versions found.&quot;);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public Integer call() {&#10;        try {&#10;            if (showManaged) {&#10;                System.out.println(&quot;=== Managed Java Versions ===&quot;);&#10;                listManagedVersions();&#10;            } else {&#10;                listLocalJavaVersions();&#10;            }&#10;            return 0;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error listing Java versions: &quot; + e.getMessage());&#10;            return 1;&#10;        }&#10;    }&#10;&#10;    private void listManagedVersions() throws Exception {&#10;        String urlStr = &quot;http://localhost:8080/javaversions/versions&quot;;&#10;        HttpURLConnection conn = (HttpURLConnection) new URL(urlStr).openConnection();&#10;        conn.setRequestMethod(&quot;GET&quot;);&#10;        try (BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()))) {&#10;            StringBuilder response = new StringBuilder();&#10;            String line;&#10;            while ((line = reader.readLine()) != null) {&#10;                response.append(line);&#10;            }&#10;            String[] versions = response.toString().split(&quot;;&quot;);&#10;            for (String version : versions) {&#10;                if (versionsInstalled.contains(version.trim())) {&#10;                    // ANSI green: \u001B[32m, reset: \u001B[0m&#10;                    System.out.println(&quot;\u001B[32m&quot; + &quot;\t\t&quot; + version.trim() + &quot;\u001B[0m&quot;);&#10;                } else if (!version.trim().isEmpty()) {&#10;                    // ANSI blue: \u001B[34m, reset: \u001B[0m&#10;                    System.out.println(&quot;\u001B[34m&quot; + &quot;\t\t&quot; + version.trim() + &quot;\u001B[0m&quot;);&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.amankrmj.capyverse.java;&#10;&#10;import picocli.CommandLine.Command;&#10;import picocli.CommandLine.Option;&#10;&#10;import java.io.BufferedReader;&#10;import java.io.File;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.io.InputStreamReader;&#10;import java.net.HttpURLConnection;&#10;import java.net.URL;&#10;import java.util.concurrent.Callable;&#10;&#10;@Command(name = &quot;list&quot;, description = &quot;List all installed Java versions&quot;)&#10;public class ListJavaVersionsCommand implements Callable&lt;Integer&gt; {&#10;    private List&lt;String&gt; versionsInstalled = new ArrayList&lt;&gt;();&#10;&#10;    @Option(names = {&quot;-i&quot;}, description = &quot;List managed Java versions from server&quot;)&#10;    private boolean showManaged = false;&#10;&#10;    private void populateInstalledVersions() {&#10;        versionsInstalled.clear();&#10;        String userProfile = System.getenv(&quot;USERPROFILE&quot;);&#10;        File javaDir = new File(userProfile + &quot;\\AppData\\Local\\capyverse\\lang\\java&quot;);&#10;        File[] folders = javaDir.listFiles(File::isDirectory);&#10;        if (folders != null &amp;&amp; folders.length &gt; 0) {&#10;            for (File folder : folders) {&#10;                String name = folder.getName();&#10;                int dashIdx = name.indexOf('-');&#10;                if (dashIdx != -1 &amp;&amp; dashIdx &lt; name.length() - 1) {&#10;                    String version = name.substring(dashIdx + 1);&#10;                    versionsInstalled.add(version.trim());&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private void listLocalJavaVersions() {&#10;        populateInstalledVersions();&#10;        if (versionsInstalled.size() &gt; 0) {&#10;            System.out.println(&quot;=== Locally Installed Java Versions ===&quot;);&#10;            String GREEN = &quot;\u001B[32m&quot;;&#10;            String RESET = &quot;\u001B[0m&quot;;&#10;            for (String version : versionsInstalled) {&#10;                System.out.println(GREEN + &quot;\t\t&quot; + version + RESET);&#10;            }&#10;        } else {&#10;            System.out.println(&quot;No local Java versions found.&quot;);&#10;        }&#10;    }&#10;&#10;    private void listManagedVersions() throws Exception {&#10;        String urlStr = &quot;http://localhost:8080/javaversions/versions&quot;;&#10;        HttpURLConnection conn = (HttpURLConnection) new URL(urlStr).openConnection();&#10;        conn.setRequestMethod(&quot;GET&quot;);&#10;        try (BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()))) {&#10;            StringBuilder response = new StringBuilder();&#10;            String line;&#10;            while ((line = reader.readLine()) != null) {&#10;                response.append(line);&#10;            }&#10;            String[] versions = response.toString().split(&quot;;&quot;);&#10;            for (String version : versions) {&#10;                if (versionsInstalled.contains(version.trim())) {&#10;                    System.out.println(&quot;\u001B[32m&quot; + &quot;\t\t&quot; + version.trim() + &quot;\u001B[0m&quot;);&#10;                } else if (!version.trim().isEmpty()) {&#10;                    System.out.println(&quot;\u001B[34m&quot; + &quot;\t\t&quot; + version.trim() + &quot;\u001B[0m&quot;);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public Integer call() {&#10;        try {&#10;            if (showManaged) {&#10;                populateInstalledVersions();&#10;                System.out.println(&quot;=== Managed Java Versions ===&quot;);&#10;                listManagedVersions();&#10;            } else {&#10;                listLocalJavaVersions();&#10;            }&#10;            return 0;&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error listing Java versions: &quot; + e.getMessage());&#10;            return 1;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/amankrmj/capyverse/java/SetJavaVersion.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/amankrmj/capyverse/java/SetJavaVersion.java" />
              <option name="originalContent" value="package com.amankrmj.capyverse.java;&#10;&#10;import picocli.CommandLine.Command;&#10;import picocli.CommandLine.Option;&#10;import picocli.CommandLine.Parameters;&#10;&#10;import java.io.File;&#10;import java.io.PrintWriter;&#10;&#10;@Command(name = &quot;set&quot;, description = &quot;Set the active Java version&quot;)&#10;public class SetJavaVersion implements Runnable {&#10;    @Option(names = {&quot;-g&quot;, &quot;--global&quot;}, description = &quot;Set globally&quot;)&#10;    private boolean global;&#10;&#10;    @Option(names = {&quot;-t&quot;, &quot;--temp&quot;}, description = &quot;Set temporarily&quot;)&#10;    private boolean temp;&#10;&#10;    @Parameters(index = &quot;0&quot;, description = &quot;Java version to set (e.g., 20, 24.0.1)&quot;)&#10;    private String version;&#10;&#10;    private void setGlobalJavaVersion(String version) {&#10;        String userProfile = System.getenv(&quot;USERPROFILE&quot;);&#10;        String javaDirPath = userProfile + &quot;\\AppData\\Local\\capyverse\\lang\\java&quot;;&#10;        File javaDir = new File(javaDirPath);&#10;        File[] folders = javaDir.listFiles(File::isDirectory);&#10;        if (folders == null || folders.length == 0) {&#10;            System.err.println(&quot;No Java versions found in &quot; + javaDirPath);&#10;            return;&#10;        }&#10;        String selectedFolder = null;&#10;        for (File folder : folders) {&#10;            String name = folder.getName();&#10;            int dashIdx = name.indexOf('-');&#10;            if (dashIdx != -1 &amp;&amp; dashIdx &lt; name.length() - 1) {&#10;                String folderVersion = name.substring(dashIdx + 1);&#10;                if (folderVersion.equals(version)) {&#10;                    selectedFolder = folder.getAbsolutePath();&#10;                    break;&#10;                }&#10;            }&#10;        }&#10;        if (selectedFolder == null) {&#10;            System.err.println(&quot;Version &quot; + version + &quot; not found in &quot; + javaDirPath);&#10;            return;&#10;        }&#10;        String binPath = selectedFolder + &quot;\\bin&quot;;&#10;        String configFilePath = userProfile + &quot;\\AppData\\Local\\capyverse\\lang\\java\\java_config.txt&quot;;&#10;        try (PrintWriter writer = new PrintWriter(configFilePath, &quot;UTF-8&quot;)) {&#10;            writer.println(&quot;java_bin=&quot; + binPath);&#10;            writer.println(&quot;installed_by=CapyverseInstaller&quot;);&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Failed to write config: &quot; + e.getMessage());&#10;            return;&#10;        }&#10;        System.out.println(&quot;✅ Set Java version to &quot; + version + &quot; globally.&quot;);&#10;    }&#10;&#10;    @Override&#10;    public void run() {&#10;        if (global) {&#10;            setGlobalJavaVersion(version);&#10;        } else if (temp) {&#10;            System.out.println(&quot;Temporary set (-t) is not implemented yet.&quot;);&#10;        } else {&#10;            System.err.println(&quot;Please specify either -g (global) or -t (temp) flag.&quot;);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.amankrmj.capyverse.java;&#10;&#10;import picocli.CommandLine.Command;&#10;import picocli.CommandLine.Option;&#10;import picocli.CommandLine.Parameters;&#10;&#10;import java.io.File;&#10;import java.io.PrintWriter;&#10;&#10;@Command(name = &quot;set&quot;, description = &quot;Set the active Java version&quot;)&#10;public class SetJavaVersion implements Runnable {&#10;    @Option(names = {&quot;-g&quot;, &quot;--global&quot;}, description = &quot;Set globally&quot;)&#10;    private boolean global;&#10;&#10;    @Option(names = {&quot;-t&quot;, &quot;--temp&quot;}, description = &quot;Set temporarily&quot;)&#10;    private boolean temp;&#10;&#10;    @Parameters(index = &quot;0&quot;, description = &quot;Java version to set (e.g., 20, 24.0.1)&quot;)&#10;    private String version;&#10;&#10;    private void setGlobalJavaVersion(String version) {&#10;        String userProfile = System.getenv(&quot;USERPROFILE&quot;);&#10;        String javaDirPath = userProfile + &quot;\\AppData\\Local\\capyverse\\lang\\java&quot;;&#10;        File javaDir = new File(javaDirPath);&#10;        File[] folders = javaDir.listFiles(File::isDirectory);&#10;        if (folders == null || folders.length == 0) {&#10;            System.err.println(&quot;No Java versions found in &quot; + javaDirPath);&#10;            return;&#10;        }&#10;        String selectedFolder = null;&#10;        for (File folder : folders) {&#10;            String name = folder.getName();&#10;            int dashIdx = name.indexOf('-');&#10;            if (dashIdx != -1 &amp;&amp; dashIdx &lt; name.length() - 1) {&#10;                String folderVersion = name.substring(dashIdx + 1);&#10;                if (folderVersion.equals(version)) {&#10;                    selectedFolder = folder.getAbsolutePath();&#10;                    break;&#10;                }&#10;            }&#10;        }&#10;        if (selectedFolder == null) {&#10;            System.err.println(&quot;Version &quot; + version + &quot; not found in &quot; + javaDirPath);&#10;            return;&#10;        }&#10;        String binPath = selectedFolder + &quot;\\bin&quot;;&#10;        String configFilePath = userProfile + &quot;\\AppData\\Local\\capyverse\\lang\\java\\java_config.txt&quot;;&#10;        try (PrintWriter writer = new PrintWriter(configFilePath, &quot;UTF-8&quot;)) {&#10;            writer.println(&quot;java_bin=&quot; + binPath);&#10;            writer.println(&quot;installed_by=CapyverseInstaller&quot;);&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Failed to write config: &quot; + e.getMessage());&#10;            return;&#10;        }&#10;        // Run setup_java.cmd after updating config&#10;        String setupCmdPath = userProfile + &quot;\\AppData\\Local\\capyverse\\lang\\java\\setup_java.cmd&quot;;&#10;        try {&#10;            Process process = new ProcessBuilder(&quot;cmd&quot;, &quot;/c&quot;, setupCmdPath).inheritIO().start();&#10;            process.waitFor();&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Failed to run setup_java.cmd: &quot; + e.getMessage());&#10;        }&#10;        System.out.println(&quot;✅ Set Java version to &quot; + version + &quot; globally.&quot;);&#10;    }&#10;&#10;    @Override&#10;    public void run() {&#10;        if (global) {&#10;            setGlobalJavaVersion(version);&#10;        } else if (temp) {&#10;            System.out.println(&quot;Temporary set (-t) is not implemented yet.&quot;);&#10;        } else {&#10;            System.err.println(&quot;Please specify either -g (global) or -t (temp) flag.&quot;);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>